[{"content":"一个阳光明媚到我睁不开眼的中午，我在招聘平台上的沟通有回复了，我像往常一样打开软件把简历投过去，接着说一句“这是我的简历，您看看”后就关闭了软件。\n意想不到的是，对方居然马上就回复了我，开始问我可以实习多长时间，一周可以干几天，什么时候开始实习。我回复她我一周我能干五天，可以实习三个月，如果有转正机会的话可以干久一点，从26年后就可以开始实习。她了解完情况后就将我的简历转发给了负责人。\n负责人看完我的简历说我的简历可以，要跟我约面试，我们加上微信后，预约的下午五点面试……\n预约时间后感觉下午的时间过的飞快，一下子来到了五点，我提前一分钟进入会议，面试官就晚我五秒进入，还是非常准时的。\n面试嘛，先是自我介绍，开始问问题，回答问题，反问面试官问题，最后结束。\n我相信看这篇文章的人都是想要看面试官问了什么问题，所以这里我也不拖沓了，直接开始！\n如何做Node版本管理？ 使用 NVM，这个不用多说了，就是一个工具，想要了解的可以点击这个链接\nCSS 让一个盒子垂直水平居中的方式有哪些？ 当时我脑子里面只有 Flex 布局，平时用顺手了，就不喜欢用其他的方式进行水平垂直居中了。不过我水平居中还是比较喜欢用 margin: 0 auto; 的。\n接下来看看具体还有哪些方式吧。\n第一种 absolute + transform 1 2 3 4 5 6 7 8 9 10 11 .container { position: relative; height: 100vh; } .card { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); } 第二种 Flex 布局 1 2 3 4 5 6 .container { display: flex; justify-content: center; align-items: center; height: 100vh; } 第三种 Grid 布局 1 2 3 4 5 .container { display: grid; place-items: center; height: 100vh; } 第四种 绝对定位和负边距 1 2 3 4 5 6 7 8 9 10 11 12 13 14 .container { position: relative; height: 100vh; } .card { position: absolute; top: 50%; left: 50%; margin-top: -50px; /* 元素高度的一半 */ margin-left: -50px; /* 元素宽度的一半 */ width: 100px; height: 100px; } 第五种 使用表格布局 1 2 3 4 5 6 7 8 9 10 11 .container { display: table; width: 100%; height: 100vh; } .card { display: table-cell; vertical-align: middle; text-align: center; } 第六种 line-height 和 text-align 适用于单行文本或内联元素的居中。\n1 2 3 4 5 6 7 8 9 10 11 .container { height: 100px; line-height: 100px; text-align: center; } .card { display: inline-block; vertical-align: middle; line-height: normal; } 第七种 margin: auto; 1 2 3 4 5 6 7 8 9 10 .container { height: 100vh; display: flex; } .card { margin: auto; width: 100px; height: 100px; } 总结 Flex 布局和 Grid 布局是最推荐也是最常用的方式，使用方便简单快捷。 绝对定位+Transform适用于未知元素尺寸的情况。 绝对定位+负边距适用于已知元素尺寸的情况。 表格布局和line-height适用于特定场景。\n标准盒模型和怪异盒模型的区别 当我面试完从晚上到答案的时候我都窒息了，居然是我最常用的 box-sizing 属性\u0026hellip;\n不想多说了，给你们链接自己去看看吧，我偷偷哭会哈哈哈\nJS 有哪些数据类型? JS 的数据类型分为两类，分别是基本数据类型（原始类型）和引用数据类型（对象类型）\n基本数据类型有：\nBoolean 布尔类型：仅有两个值分别为 True 和 False。 Number 数字：包含整数、浮点数及特殊值（Infinity、-Infinity，NaN），JS不区分整型和浮点型，均以64位浮点数存储。 String 字符串：表示文本数据，用单引号或双引号包裹。支持转义字符和模板字符串。 Null 空值：常用于显示清空变量引用。 Undefined：表示变量已经声明但未赋值，或对象属性不存在时的默认值。 Symbol 符号（ES6新增）：唯一且不可变的值，常用做对象属性的唯一标识符。 BigInt 大整数（ES2020新增）：用于表示超出 Number 精度范围的大整数，后缀加n。 引用数据类型有：\nObject 对象：键值对的集合，可包含任意数据类型（包括其他对象） Array 数组：有序集合，元素为任意类型。通过索引访问，支持动态长度。 Function 函数：可执行代码块，本质是“可调用对象” 其他内置对象：Date（日期）、RegExp（正则表达式）、Map/Set（ES6新增数据结构）等。 建议看看博客园的这篇文章，写的很好。\nnull 和 undefined 的区别 因为上上一个问题过于的悲伤，突然悲从心来，忍不住了，想哭……绝对不是因为我偷懒不想码字，算了不解释了，给你们链接自己看\n什么是闭包？闭包的弊端？ 闭包的本质就是在函数内部创建另一函数。闭包有三个特性：\n函数嵌套函数 函数内部可以引用函数外部的参数和变量 参数和变量不会被垃圾回收机制回收 闭包的弊端：\n引用的私有变量无法被销毁，增大了内存消耗，造成内存泄漏。 因为闭包的跨域访问，所以会导致性能损失。 节流和防抖 防抖：适用于需要在事件触发后等待一段时间，等待期间如果再次触发则重新计时的场景，如搜索框输入联想。\n节流：适用于需要限制事件触发频率的场景，如滚动事件、鼠标移动、按钮的重复点击事件。\n比较维度 防抖（Debounce） 节流（Throttle） 定义 延迟执行，在指定时间内不再触发事件才会执行 限制执行频率，每隔一定时间执行一次 触发时机 最后一次触发事件后 按照固定的时间间隔执行 适用场景 输入框搜索、表单验证、窗口调整 页面滚动、按钮点击、游戏动画 控制频率 事件停止后执行一次 固定时间间隔内执行一次 谈对 Promise 的理解，以及在项目中是如何使用的 这里我就不多说了，内容非常多，所以老样子，上链接！\nVue2 和 Vue3 的区别 老样子，走你！\nVue3 中子传父、父传子怎么做 这个没有什么多少的，就是 defineProps，以及 defineEmits，还有 defineExpose。\ndefineProps: 接受父组件传递给子组件的数据 defineEmits: 子组件向父组件传值 defineExpose: 向父组件暴露属性和方法 路由传参的方式有哪些？如果我在 A 页面有一个参数想要带给 B 页面如何利用路由传参来完成 在 Vue3 中使用 vue-router v4 时，路由传参的核心逻辑与 Vue2 类似，但语法上因 Composition API 的引入有所调整。以下是具体的传参方式和实现步骤：\n一、Query 参数（URL 显式传递） 参数以 ?key=value 形式拼接在 URL 中，适合传递非敏感参数。\n实现步骤： A 页面跳转传参\n使用 useRouter 钩子获取路由实例，调用 push 方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // A.vue import { useRouter } from \u0026#39;vue-router\u0026#39; export default { setup() { const router = useRouter() const goToB = () =\u0026gt; { router.push({ path: \u0026#39;/B\u0026#39;, // 或 name: \u0026#39;B\u0026#39;（需路由配置name） query: { id: 123, name: \u0026#39;张三\u0026#39; } }) } return { goToB } } } B 页面接收参数\n使用 useRoute 钩子获取当前路由信息：\n1 2 3 4 5 6 7 8 9 10 11 12 // B.vue import { useRoute } from \u0026#39;vue-router\u0026#39; export default { setup() { const route = useRoute() // 访问参数 console.log(route.query.id) // 123 console.log(route.query.name) // \u0026#39;张三\u0026#39; } } URL 表现\n跳转后 URL：/B?id=123\u0026amp;name=张三\n二、Params 参数（动态路径传递） 参数作为 URL 路径的一部分（如 /B/123），适合传递标识性参数（如 ID）。\n实现步骤： 配置路由规则\n在 router/index.js 中定义动态参数：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // router/index.js import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import B from \u0026#39;../views/B.vue\u0026#39; const routes = [ { path: \u0026#39;/B/:id/:name\u0026#39;, // 动态参数用:标识 name: \u0026#39;B\u0026#39;, component: B } ] const router = createRouter({ history: createWebHistory(), routes }) A 页面跳转传参\n需通过 name 匹配路由（不能用 path 直接拼接）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // A.vue import { useRouter } from \u0026#39;vue-router\u0026#39; export default { setup() { const router = useRouter() const goToB = () =\u0026gt; { router.push({ name: \u0026#39;B\u0026#39;, // 必须使用name params: { id: 123, name: \u0026#39;张三\u0026#39; } }) } return { goToB } } } B 页面接收参数\n通过 useRoute 获取 params：\n1 2 3 4 5 6 7 8 9 10 11 // B.vue import { useRoute } from \u0026#39;vue-router\u0026#39; export default { setup() { const route = useRoute() console.log(route.params.id) // 123 console.log(route.params.name) // \u0026#39;张三\u0026#39; } } URL 表现\n跳转后 URL：/B/123/张三\n三、Props 传递（路由解耦） 通过路由配置将参数以 props 形式注入组件，避免组件直接依赖 $route，更符合 Composition API 思想。\n实现步骤： 配置路由（开启 props）\n1 2 3 4 5 6 7 8 9 // router/index.js const routes = [ { path: \u0026#39;/B/:id\u0026#39;, name: \u0026#39;B\u0026#39;, component: B, props: true // 开启props传递 } ] A 页面跳转（同 params 方式）\n1 2 3 4 5 // A.vue router.push({ name: \u0026#39;B\u0026#39;, params: { id: 123 } }) B 页面通过 props 接收\n在组件中定义 props 接收参数：\n1 2 3 4 5 6 7 8 9 10 11 12 // B.vue export default { props: { id: { type: String, // params参数默认是字符串类型 required: true } }, setup(props) { console.log(props.id) // 123 } } 四、关键区别与注意事项 Query vs Params\nQuery 参数刷新页面不会丢失，Params 参数刷新后会保留（需路由配置动态参数）。 Query 适合可选参数，Params 适合必填的标识性参数。 Vue3 特有\n必须通过 useRouter 和 useRoute 钩子获取路由实例。 组合式 API 中，参数获取需在 setup 函数内处理。 根据参数类型和场景选择合适的方式即可，简单参数用 Query/Params，组件化场景用 Props，复杂数据用状态管理。\n设计商品选择列表，全选功能 比如我有五个商品，我选中这五个商品，全选按钮的状态就变为选中，我取消了其中一个全选状态变为未选中，这个你要如何设计呢？\n这最后一个问题就留给各位来完成喽~\n好吧，我还是给代码吧。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;!-- 全选按钮 --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;allChecked\u0026#34; @change=\u0026#34;handleAllCheck\u0026#34; id=\u0026#34;select-all\u0026#34; \u0026gt; \u0026lt;label for=\u0026#34;select-all\u0026#34;\u0026gt;全选\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 商品列表 --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;product in products\u0026#34; :key=\u0026#34;product.id\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;product.checked\u0026#34; @change=\u0026#34;handleItemCheck\u0026#34; :id=\u0026#34;`product-${product.id}`\u0026#34; \u0026gt; \u0026lt;label :for=\u0026#34;`product-${product.id}`\u0026#34;\u0026gt;{{ product.name }}\u0026lt;/label\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;!-- 已选商品统计 --\u0026gt; \u0026lt;div\u0026gt; 已选中 {{ selectedCount }} 件商品 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import { ref, computed, watch } from \u0026#39;vue\u0026#39;; // 1. 初始化商品数据（含选中状态） const products = ref([ { id: 1, name: \u0026#39;商品1\u0026#39;, checked: false }, { id: 2, name: \u0026#39;商品2\u0026#39;, checked: false }, { id: 3, name: \u0026#39;商品3\u0026#39;, checked: false }, { id: 4, name: \u0026#39;商品4\u0026#39;, checked: false }, { id: 5, name: \u0026#39;商品5\u0026#39;, checked: false }, ]); // 2. 全选状态 const allChecked = ref(false); // 3. 计算已选中商品数量 const selectedCount = computed(() =\u0026gt; { return products.value.filter(item =\u0026gt; item.checked).length; }); // 4. 监听商品选中状态变化，更新全选按钮 watch( // 监听所有商品的checked属性 () =\u0026gt; products.value.map(item =\u0026gt; item.checked), (newVal) =\u0026gt; { // 当所有商品都选中时，全选按钮为true allChecked.value = newVal.every(checked =\u0026gt; checked); } ); // 5. 全选按钮变化时，更新所有商品的选中状态 const handleAllCheck = () =\u0026gt; { products.value.forEach(item =\u0026gt; { item.checked = allChecked.value; }); }; // 6. 单个商品选中状态变化时，触发watch更新全选按钮 const handleItemCheck = () =\u0026gt; { // 无需额外逻辑，watch会自动检测并更新allChecked }; \u0026lt;/script\u0026gt; 最后我想说 我要感谢面试官，给我一个认清自己的机会，要不然我还一直基础不牢靠，死劲开发呢，面试结束后了解了这么多的细节，我才明白，基础是多么重要！\n之前我还看不起八股文，但回想起来我高中的时候如果不是因为基础牢靠，怎么可能获得编程比赛省级第二名呢。\n","date":"2025-10-16T17:37:24+08:00","image":"http://kjsone.com/articles/2025/10/interview-summary-anxiang/pexels-olly-3760072_hu_ac08429c042eea51.jpg","permalink":"http://kjsone.com/articles/2025/10/interview-summary-anxiang/","title":"前端实习生面试总结"},{"content":"什么？我的超声波指纹居然无法识别了！ 昨天我在 PDD 买的钢化膜到了，满怀激动的贴上后我的超声波指纹居然无法识别了！我就找客服理论，客服找我要证据，我就让我的舍友帮我在一旁录制视频，将原来的指纹删掉再录入……我的指纹就连录入都不行了！\n视频发过去后，客服回应我说要不赔我两张水凝膜吧。我怎么可能接受，鄙人平时手机不是磕了就是碰了，水凝膜哪里能保护我这可爱的屏幕，再说了我本来就是要买钢化膜，你给我水凝膜算怎么回事，我直接一个不接受。\n接下来客服就像一个机器人一样，就想让我接受两个水凝膜的补偿说运费不用我出。我依旧强硬的拒绝，这个时候 PDD 官方检测到了，开始介入，我直接就是一个申请全额退款，不惯着这商家，小米15本来全系都是超声波指纹，你居然不适配还拿出来买，定价还 16 块多。\n没多久退款就下来了，这点还是要称赞 PDD 给力的，哈哈哈哈。\n闪魔我爱你！ 收到退款后，我立马在京东下单了闪魔的钢化膜 20 多两张膜，而且明日达，要知道我在 PDD 下单的那个商家可是给我发货了好几天的。\n今天拿到膜后，我立马连教程都不看就贴上了，还是不得不佩服我的手艺了，贴的非常完美哈哈哈。\n紧接着，我立马测试我的指纹识别——好使！\n之后我就将我右手的拇指录入进去了依旧好使，称赞闪魔！我爱闪魔！\n吐槽 咱就说了，人家闪魔 20 多两张膜，算起来也就 10 块多一点一张，你 PDD 的那个商家 16 块多一张，还不如人家闪魔的，害……\n所以我在此呼吁家人们，买东西之前一定要把眼睛擦亮了，我看 PDD 商品名前标注一个 品牌 所以才放心买的，没想到东西不行啊。\n","date":"2025-10-14T15:04:51+08:00","permalink":"http://kjsone.com/articles/2025/10/daily-about-phone-protective-film/","title":"日记-关于手机保护膜"},{"content":"第一次使用 Hugo 来搭建自己的博客，没有想到的是过程竟然意外的顺利，只需要 下载-\u0026gt;安装-\u0026gt;配置-\u0026gt;发布 就能搭建出来自己的博客。\n在安装和配置 Hugo 之前，先来了解 Hugo 是什么，可以用来做什么吧。\n什么是 Hugo? Hugo 是一款用 Go 语言开发的静态网站生成器，以其快速构建和零依赖而著称。它通过将 Markdown 等格式的内容与模板结合，生成纯静态的 HTML 文件，适用于博客、文档站、作品集等场景。Hugo 结合了速度、灵活性和易用性，是现代静态网站开发的理想选择。\n安装 Hugo 在安装 Hugo 之前需要确保你可以正常访问 Github，如果不能访问 Github 我推荐使用这个工具: Steam++，开启工具后点击这里：访问 Github，来测试是否能正常访问 Github。\n这里我不会介绍从 Hugo Github 主页中下载、安装和配置 Hugo 的方式，我推荐使用 Scoop 这个工具来安装 Hugo。这里我会配上 Scoop 安装教程。\n安装完 Scoop 后，我们只需要在 Windows 终端中输入一行命令:\n1 scoop install hugo 然后等待安装完成就好啦。\n安装成功后，在自己的工作目录中打开终端，来新建一个 Hugo 网站。输入这个命令：\n1 2 # sitename 为网站名(文件夹名)，推荐使用英文名如 Blog hugo new site \u0026lt;sitename\u0026gt; 之后我们在终端输入，下面这行命令，在资源管理器中打开我们新建的网站：\n1 2 3 # \u0026lt;sitename\u0026gt; 为你上面创建网站所使用的名称 cd \u0026lt;sitename\u0026gt; explorer . 在资源管理器中打开后你就能看到 Hugo 新建网站的结构了，点击这里跳转到 Hugo 目录说明。\n下载主题 拥有一个好看的主题可以让访客留下一个好的观感和阅读体验，所以我们需要寻找一个自己认可的主题来配置到自己的网站上。点击这里跳转到 Hugo Themes。来寻找自己喜欢的主题。\n本文中我将使用 Stack 主题作为演示\n点击 Download 前往 Github 下载主题。\n将下载好的主题解压到自己的网站目录下的 themes 目录 (如果你仔细看过 Hugo 目录说明的话应该知道我在说什么) 下并解压，接着重命名为 home-theme-stack，再删掉压缩包。\n进入到刚刚解压的主题目录中，找到 exampleSite 目录并进入，将里面的 hugo.yaml 文件和 content 目录复制到你网站的主目录中去。复制完后你会在主目录中看到有两个 hugo 名称的文件，你需要将 hugo.toml 删除，保留 hugo.yaml 也就是我们刚刚复制过来的配置文件。\n不过这个过程中需要注意的是，因为我们国内网络的问题，无法访问 Youtube 网站，所以需要将他的视频引用示例文件夹给删掉。也就是将 content/post/rich-content 目录删除。\n接着保存，输入下面的命令，打开浏览器，地址栏输入 http://localhost:1313/ 就能看到你创建的网站啦。\n1 2 # -D 的作用是显示草稿文章(未发布文章) hugo server -D 配置主题 主题的配置基本上在 hugo.yaml 中就能完成，比如头像的配置，国际化的配置，个人信息的配置，页面结构的配置等。我们先从最基本的网站信息配置开始。\n网站信息的配置 网站信息主要包含以下几项：\n基本链接(baseurl)：这个也就是你网站的域名了，比如我的就是 https://kjsone.dsheep.com。 网站语言代码(languageCode)：他默认使用的是 en-us，也就是英文美国，我们中国的语言代码是 zh-cn (简体中文)。 主题(theme)：这个配置不用改（如果你完全按照我之前的步骤来的话）。 版权(copyright)：一般这里都写你的名字（网名，比如我就是KJSone）。 默认文章内容语言(DefaultContentLanguage)：一般情况下我们都使用中文，所以这里使用 zh-cn。 图标 网站图标的配置在 params 下的 favicon 中，需要将 ico 文件放在 static 目录下，然后使用 /\u0026lt;filename\u0026gt; 的方式进行引用。我的配置如下：\n1 2 params: favicon: /favicon.ico 页脚 页脚可配置的选项有网站创建年份以及自定义文本，同样在 params 下进行配置\n1 2 3 4 5 params: ...其他配置 footer: since: 2025 customText: \u0026#34;自定义文本\u0026#34; 页面语言配置 页面语言我仅保留了中文，这样多语言选项组件就会从页面上消失，我的配置如下：\n1 2 3 4 5 6 7 8 languages: zh-cn: languageName: 中文 title: KJSone weight: 2 params: sidebar: subtitle: 欢迎来到我的博客，希望你能在这里有所收获！ 侧边栏配置 侧边栏同样在 params 下，emoji 就是头像右下角的表情，subtitle 就是你名字下面的简介，avatar 是用于设置你的头像。\n这里需要重点讲一下的是头像所要存放的位置，应该在主目录下 assets/img 中，如果你直接放在 assets 目录中的话，可以将 src 属性的值改为 /\u0026lt;filename\u0026gt;。\n1 2 3 4 5 6 7 8 9 params: ...其他配置 sidebar: emoji: 😜 subtitle: 欢迎来到我的博客,希望你能在这里有所收获! avatar: enabled: true local: true src: img/avatar.png 文章配置 文章的配置有，需要说一下的是 boolean 是布尔类型，它的值有 true | false，分别对应“是”|“否”，也就是功能“开启”|“关闭”的意思:\nmath(boolean)：是否支持数学公式，也就是 LaTeX 语法。 toc(boolean): 是否开启目录。 readingTime(boolean)：是否开启阅读时间，它会根据文章字数来估算大概的计算一篇文章阅读所需要的时间。 license：版权 enabled(boolean)：是否开启版权 default(string)：版权协议，默认是“Licensed under CC BY-NC-SA 4.0”，感兴趣的可以查一下，大概的意思是你写的文章可以被复制、转载，但是不可用于商业用途盈利。 我的配置如下：\n1 2 3 4 5 6 7 8 9 params: ...其他配置 article: math: true toc: true readingTime: true license: enabled: true default: Licensed under CC BY-NC-SA 4.0 评论配置 评论配置需要将你的项目发布到 Github 上去，并且仓库的权限需要更改为公开，至于为什么需要发布到 Github 因为我使用的是 utterances，它是一款免费的评论组件，其实它是利用了 Github 的 issue 功能，他会为每一篇文章开启一个独立的 issue。\n我的配置如下：\n1 2 3 4 5 6 7 8 9 params: comments: enabled: true provider: utterances utterances: repo: \u0026#34;DaiMu-210/kjsone-blog\u0026#34; issueTerm: pathname label: 这里需要注意的是，Stack 主题默认使用的是 disqus，我们需要将 provider 属性的值改为 utterances。\nutterances 中 repo 中需要填写你的用户名和仓库名。其他属性不用改。Label 的作用就给你的文章的评论(issue)添加一个标签。\nStack 主题发布文章要求 使用Stack发布文章需要注意的是一篇文章就是一个文件夹，并且 Markdown 文件需要命名为 index.md，文章中使用的视频或图片等资源需要放在此文件夹下，引用方式为 /\u0026lt;filename\u0026gt;。\n例子，比如我现在需要创建一篇文章叫“MyFirstBlog”，首先我们需要先输入下面这条命令来创建一篇文章：\n1 hugo new content post/MyFirstBlog/index.md 之后我们就可以撰写文章中的内容了。\n文章头信息 目前我已知的可设置的头信息如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- title: description: date: image: math: license: hidden: comments: draft: tags: keywords: readingTime: --- title: 文章标题 description：文章摘要 date：创建时间（这个是自动生成的，不需要我们改） image: 文章的头图，如果头图与文章同目录直接点击文章名即可，比如我的这篇文章是这样的：image: hugo_logo.png math：是否开启数学公式 license：版权协议，不写的话它会使用配置文件中默认的那个，上面有提到过忘了就翻上去看看。 hidden(boolean)：文章是否隐藏 comments(boolean)：是否开启评论 draft(boolean)：是否为草稿，如果开启为 True 的话发布情况下是看不到这篇文章的。 tags([]string)：文章的标签，比如我的这篇文章是这样的：tags: [\u0026quot;杂记\u0026quot;] keywords([]string)：文章的关键词，有助于SEO，说人话就是有助于搜索。 readingTime(boolean)：是否开启预计阅读时长。 一般情况下并不会使用所有属性，主要使用的有title、description、date、draft。\n引用块（如果你的文章中有使用其他人的内容的话可能你需要这个） 1 2 3 {{\u0026lt; quote author=\u0026#34;作者\u0026#34; source=\u0026#34;出处\u0026#34; url=\u0026#34;文章链接\u0026#34; \u0026gt;}} 引用内容 {{\u0026lt; /quote \u0026gt;}} author：是引用文章的作者名字 source：引用出处，一般是文章的名字 url：引用文章的链接 引用块的格式就是这样的，比 Markdown 的 \u0026gt; 语法看起来更加专业一些。我的友链中就使用到了，大家感兴趣的话可以去看看。\n视频引用 其实 Stack 主题提供了很多平台的视频引入方式，不过我们国内可使用的只有哔哩哔哩和腾讯两家。\n1 2 3 4 哔哩哔哩： {{\u0026lt; bilibili VIDEO_ID PART_NUMBER \u0026gt;}} 腾讯： {{\u0026lt; tencent VIDEO_ID \u0026gt;}} 还有本地视频的引入方式：\n1 2 3 {{\u0026lt; video VIDEO_URL \u0026gt;}} {{\u0026lt; video src=\u0026#34;VIDEO_URL\u0026#34; autoplay=\u0026#34;true\u0026#34; poster=\u0026#34;./video-poster.png\u0026#34; \u0026gt;}} 结束语 这是我的第一篇文章，说实话，我从来没有做笔记的习惯，这篇文章我写了大概四个小时，虽然内容不是很多，但如果能帮助到正在阅读这篇文章的朋友我会很开心。需要帮助的朋友如果还遇到了其他的困难可以在下面发表评论，遇到问题我们一起解决，在编程和学习的这条路上你从来都不是自己一个人。\n最后感谢大家阅读我的文章。\n","date":"2025-10-08T15:08:23+08:00","image":"http://kjsone.com/articles/2025/10/my-hugo-init-note/hugo_logo_hu_a06c8814bf2a76fe.png","permalink":"http://kjsone.com/articles/2025/10/my-hugo-init-note/","title":"我的Hugo初始化记录"}]